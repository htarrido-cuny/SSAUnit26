/**
 * File:    Example3.cga
 * Created: 12 Mar 2021 23:02:09 GMT
 * Author:  User
 */

version "2020.1"

#1: Setbacks, Skyplanes, complicated skyplanes
#2: Platforms Basic
#3: Platforms Advance: Visual Analysis, Baking the output, the village



import converter: "meterToFeet.cga"

@Group("Skyplane")
@Enum("Y","N")
attr skyplane  = "Y"

@Enum("QH", "Skyplane")
attr EnvelopeType = "QH"

@Distance
@Range(min=10, max=300)
attr baseHeight = 10

@Distance
@Range(min=10, max=300)
attr maxHeight =100

/*
Uncomment this if you want to make it a parameter driven by street type
BaseHeight(streetType) =
	case streetType == "Narrow": 40
	else: 60 #wide
	
maxHeight(streetType) = 
	case streetType == "Narrow": 75
	else: 85 #Wide
	
*/

@Range(min=25, max=90)
attr frontAngle1 = 45

@Range(min=25, max=90)
attr frontAngle2 = 30

attr StepBackDistance = 15


@Group("FAR")
@Range(min=1, max =2)
attr Leftover_FAR = 10

attr floorArea = 0
attr LotArea = 0
attr maxFloorArea = 0


@Group("Floors")
@Distance
attr floorHeight = 3

@Distance
@Range(min=0, max=50)
attr adjustment = 0

attr HEIGHTROOF = 0

@Group("Yards")
attr FrontYard = 10
attr RearYard = 30
attr  LeftYard = 8
attr RightYard =15

@Enum("Interior", "Corner", "Through")
attr LotType  = "Interior"

@Group("Visualization")
@Range(min=0,max=1)
attr transparency = 0.5


#####
@Hidden
getStreetType = edgeAttr.getString("streetcategories")

attr differentAngles = 
	case getStreetType == "Wide": 45
	else: 30



################################################
# Rules start here
################################################


@StartRule
Parcel -->
	set(maxFloorArea, LotArea * Leftover_FAR)
	frontYard
	ZoningEnvelope

frontYard -->
	setback(converter.feet(FrontYard)){street.front: randomColor | remainder: rearYard}
	
rearYard -->
	setback(converter.feet(RearYard)){street.back: randomColor | remainder: NIL}


ZoningEnvelope -->
		case EnvelopeType != "Skyplane":
			extrude(converter.feet(baseHeight))
			print(getStreetType)
			comp(f){top: Stepback}
			transparentColor 
		
		else:
			case LotType == "Corner":
				report("Leftover_FAR", Leftover_FAR)
				envelope(world.up, maxHeight, 
		      			comp(fe) { street.front: baseHeight | street.back = baseHeight }, 
		      			comp(fe) {0: frontAngle1 | 1: frontAngle2 | all = 90 })
			
				transparentColor
			
			else:
				report("Leftover_FAR", Leftover_FAR)
				envelope(world.up, maxHeight, baseHeight, frontAngle1)
				set(initialFloorArea, converter.sqmeterTosqft(geometry.area(bottom)))
				SplitEnvelope
				#transparentColor 

Stepback -->
	setback(converter.feet(StepBackDistance)){street.front:  balcony. | remainder: UpperPart}
	
attr upperPartHeight = 0
attr initialFloorArea = 0

UpperPart -->
	set(upperPartHeight, converter.feet(maxHeight-baseHeight))
	extrude(upperPartHeight)
	transparentColor
	
Building --> extrude(converter.meterTofeet(maxHeight))

attr currentFloorArea = 0
attr addedFloorArea = "0;"

SplitEnvelope -->
	split(y){floorHeight: ReportFloor}*
	comp(f){1: selected. | all: NIL}
	
	
ReportFloor -->
	report("FAR", converter.sqmeterTosqft(geometry.area(bottom)))
 	#randomColor
 	print(getTreeKey())
 	#CheckFARLimit(LotArea)
	
CheckFARLimit(tractValue) -->
	case tractValue >= maxFloorArea:
		NIL
		print("I have exceeded the maxFloorArea")
		print(getTreeKey())
		
	else:
		CheckFARLimit(tractValue + converter.sqmeterTosqft(geometry.area(bottom)))


	
################################################
# Visualization rules
################################################

randomColor --> color(rand(1),rand(1),rand(1))

transparentColor --> color(1,1,1,transparency )
		
	